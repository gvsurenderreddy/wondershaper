#!/bin/bash
# Wonder Shaper
#
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped.

# NetworkManager info:
IF=$1
STATUS=$2

TC="/sbin/tc"
ETH_DOWNLINK=100000
ETH_UPLINK=100000
DOWNLINK=12000
UPLINK=500
DEV="p6p1"
LOCALNET="192.168.10.0/24"
# low priority source ports
NOPRIOPORTSRC="4662 4672 4665 8333 51413"
# low priority destination ports
NOPRIOPORTDST="4662 4672 4665 8333 51413"

if [ "$1" = "status" ]; then
	echo "qdiscs"
	echo "--------"
	$TC -s qdisc ls dev $DEV
	echo "classes"
        echo "--------"
	$TC -s class ls dev $DEV
	echo "filters"
        echo "--------"
	$TC filter show dev $DEV
	exit
fi


if [ "$IF" = "$DEV" ] && [ "$STATUS" = "up" ]; then

	# clean existing down- and uplink qdiscs, hide errors
	$TC qdisc del dev $DEV root    2> /dev/null > /dev/null
	$TC qdisc del dev $DEV ingress 2> /dev/null > /dev/null

	###### uplink

	# install root HTB, point default traffic to 1:20
	# Class 1:1 Localnet
	# Class 1:2 Internet
	# Class 1:10 Internet - high priority
	# Class 1:20 Internet - normal priority
	# Class 1:30 Internet - low priority
	$TC qdisc add dev $DEV root handle 1: htb default 20
	$TC class add dev $DEV parent 1: classid 1:1 htb rate ${ETH_UPLINK}kbit ceil ${ETH_UPLINK}kbit burst 512k prio 4
	$TC class add dev $DEV parent 1:1 classid 1:2 htb rate ${UPLINK}kbit ceil ${UPLINK}kbit burst 6k prio 3
	$TC class add dev $DEV parent 1:2 classid 1:10 htb rate $[6*$UPLINK/10]kbit ceil ${UPLINK}kbit burst 6k prio 1
	$TC class add dev $DEV parent 1:2 classid 1:20 htb rate $[3*$UPLINK/10]kbit ceil ${UPLINK}kbit burst 6k prio 2
	$TC class add dev $DEV parent 1:2 classid 1:30 htb rate $[$UPLINK/10]kbit ceil ${UPLINK}kbit burst 6k prio 5

	# all get Stochastic Fairness:
	$TC qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
	$TC qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
	$TC qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10

	###### $TC Filters
	## Localnet
	$TC filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
		match ip dst 192.168.10.0/24 flowid 1:1	

	## Max priority
	# TOS Minimum Delay (ssh, NOT scp) in 1:10:
	$TC filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
	      match ip tos 0x10 0xff  flowid 1:10
	
	# DNS
	$TC filter add dev $DEV parent 1: protocol ip prio 10 u32 \
                   match ip dport 53 0xffff flowid 1:10

	# ICMP (ip protocol 1) in the interactive class 1:10 so we 
	# can do measurements & impress our friends:
	$TC filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
        	match ip protocol 1 0xff flowid 1:10

	# To speed up downloads while an upload is going on, put ACK packets in
	# the interactive class:
	$TC filter add dev $DEV parent 1: protocol ip prio 10 u32 \
	   match ip protocol 6 0xff \
	   match u8 0x05 0x0f at 0 \
	   match u16 0x0000 0xffc0 at 2 \
	   match u8 0x10 0xff at 33 \
	   flowid 1:10

	## Low priority
	for a in $NOPRIOPORTDST
	do
		$TC filter add dev $DEV parent 1: protocol ip prio 10 u32 \
		   match ip dport $a 0xffff flowid 1:30
	done

	for a in $NOPRIOPORTSRC
	do
	 	$TC filter add dev $DEV parent 1: protocol ip prio 10 u32 \
		   match ip sport $a 0xffff flowid 1:30
	done

	###### Iptables Filters
        # Localnet
        $TC filter add dev $DEV protocol ip prio 2 handle 1 fw flowid 1:1
        # Max priority
        $TC filter add dev $DEV protocol ip prio 1 handle 10 fw flowid 1:10
        # Medium priority
        $TC filter add dev $DEV protocol ip prio 3 handle 20 fw flowid 1:20
        # Low priority
        $TC filter add dev $DEV protocol ip prio 4 handle 30 fw flowid 1:30

elif [ "$IF" = "$DEV" ] && [ "$STATUS" = "down" ]; then
	# clean existing down- and uplink qdiscs, hide errors
        $TC qdisc del dev $DEV root    2> /dev/null > /dev/null
        $TC qdisc del dev $DEV ingress 2> /dev/null > /dev/null
fi
